/*

 @Procedural Approach:
 1. Language Support : support procedural language like pL/pgSQL, PL/Perl, PL/Python etc.
 2. Complex Logic: Allows for complex logic using control stucture like loops, conditionals and exception handling
 3. Variable support: Supports variable declarations and manipulation within the procedural code
 4. Stored Procedures/Functions: Provides the ability to create stored procedures or functions.

 @Non-Procedural Approach:
 1. Declarative Queries: Focues on wring declarative sql queries to retrive, insert, update, or delete data from the database.
 2. Simplicity: Emphasize simplicty by expressing operations in terms of what data is needed.
 3. SQL functions: Support SQL functions, which are single SQL statements that return a value or set of values.
 4. Performance: Can sometimes offer better performance for simple operations due to the optimized query execution plans generated by the database engine.

*/

SELECT * from employees2;

CREATE Function emp_count()
RETURNS INT
LANGUAGE SQL
AS
$$
    SELECT count(*) from employees2;
$$;

SELECT emp_count();

CREATE Function delete_emp()
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE from employees2 WHERE employee_id = 40; 
$$;

SELECT delete_emp();
SELECT emp_count();

CREATE Function empbyID(p_emp_id INT)
RETURNS void
LANGUAGE SQL
AS
$$
    DELETE from employees2 WHERE employee_id = p_emp_id; 
$$;

SELECT empbyID(39);
SELECT emp_count();

CREATE Procedure removeEmployeeVar()
LANGUAGE plpgsql
AS
$$
DECLARE 
test_var INT;
BEGIN 
    SELECT employee_id INTO test_var from employees2 where employee_id = 26;
    DELETE FROM employees2 WHERE employee_id = test_var;
END
$$;

call removeEmployeeVar();


CREATE Procedure removeEmployeevar2(p_emp_id INT)
LANGUAGE plpgsql
AS
$$
DECLARE 
test_var INT;
BEGIN 
    SELECT employee_id INTO test_var from employees2 where employee_id = p_emp_id;
    DELETE FROM employees2 WHERE employee_id = test_var;
    RAISE NOTICE 'Employee Removed Successfull!';
END
$$;

call removeEmployeeVar2(25);

SELECT * from employees2;
